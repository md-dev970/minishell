#ifndef LIST_H
#define LIST_H



/* t_list structure */
typedef struct t_list {
        /* content of the t_list element */
        void *content;
        /* pointer to the next element */
        struct t_list *next;
} t_list;



/* Create a new t_list element */
t_list *ft_lstnew(void *content);



/* Add an element to the back(end) of a t_list */
void ft_lstadd_back(t_list **lst, t_list *new);



/* Add an element to the front(start) of a t_list */
void ft_lstadd_front(t_list **lst, t_list *new);



/* Delete one element of a t_list */
void ft_lstdelone(t_list *lst, void (*del)(void *));



/* Delete all the elements of a t_list */
void ft_lstclear(t_list *lst, void (*del)(void *));



/* Apply a given function to the content of each element */
void ft_lstiter(t_list *lst, void (*f)(void *));



/* Return the last element in a t_list */
t_list *ft_lstlast(t_list *lst);



/*
* Generate and return a new t_list where the content of each element is 
* generated by a function f from the content of the t_list given as an argument
*/
t_list *ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *));



/* Pop the first element from the list and return it */
t_list *ft_lstpop_front(t_list **l);



/* Return the number of elements in a t_list */
int ft_lstsize(t_list *lst);




#endif /* LST_H */